using AutoDeepClone.Core.Modes;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AutoDeepClone.Core;

public partial class AutoDeepCloneGenerator
{
    internal static void GenerateCore(SourceProductionContext context, GenerateComparerCommand command)
    {
        if (command == null)
        {
            return;
        }

        var generatedSource = GenerateComparerContent(command);
        if (string.IsNullOrEmpty(generatedSource))
        {
            return;
        }

        var filename = GetFileName(command);
        context.AddSource(filename, SourceText.From(generatedSource, Encoding.UTF8));
    }

    static string GenerateComparerContent(GenerateComparerCommand command)
    {
        var outputClassDescription = command.HostingClassDescription ?? command.TargetClassDescription;
        if (outputClassDescription == null)
        {
            return string.Empty;
        }

        var classDeclarationHeaders = new List<string>();

        var sb = new StringBuilder();

        var fullTypeName = command.TargetClassDescription.FullClassName;
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine($$"""
                        namespace {{outputClassDescription.Namespace}}
                        {
                        """);

        foreach (var ns in command.UsingNamespaces.OrderBy(x => x))
        {
            if (string.IsNullOrWhiteSpace(ns))
            {
                continue;
            }

            AppendIndentedText(sb, 1, $"using {ns};");
        }

        sb.AppendLine();

        string mainClassName = null;
        if (command.HostingClassDescription != null)
        {
            mainClassName = command.HostingClassDescription.ClassName;
            classDeclarationHeaders.Insert(0, $$"""
                                                {{command.HostingClassDescription.Accessibility}} partial class {{mainClassName}}
                                                {
                                                """);

            var containgClassDesc = command.HostingClassDescription.ContainingClass;
            while (containgClassDesc != null)
            {
                classDeclarationHeaders.Insert(0, $$"""
                                                    {{containgClassDesc.Accessibility}} partial class {{containgClassDesc.ClassName}}
                                                    {
                                                    """);
                containgClassDesc = containgClassDesc.ContainingClass;
            }
        }
        else
        {
            mainClassName = $"{command.TargetClassDescription.ClassName}";
            classDeclarationHeaders.Insert(0, $$"""
                                                {{command.TargetClassDescription.Accessibility}} partial class {{mainClassName}}
                                                {
                                                """);

            var containgClassDesc = command.TargetClassDescription.ContainingClass;
            while (containgClassDesc != null)
            {
                classDeclarationHeaders.Insert(0, $$"""
                                                    {{containgClassDesc.Accessibility}} partial class {{containgClassDesc.ClassName}}
                                                    {
                                                    """);
                containgClassDesc = containgClassDesc.ContainingClass;
            }
        }

        for (var i = 0; i < classDeclarationHeaders.Count; i++)
        {
            AppendIndentedText(sb, i + 1, classDeclarationHeaders[i]);
        }

        AppendIndentedText(sb, classDeclarationHeaders.Count + 1, $$"""
                                                                    public {{mainClassName}} DeepClone()
                                                                    {
                                                                        return new {{mainClassName}} 
                                                                        {
                                                                    """);

        var notGeneratedProperties = new List<GeneratorPropertyDescription>();
        foreach (var property in command.Properties)
        {
            if (!property.ShouldGenerate)
            {
                notGeneratedProperties.Add(property);
                continue;
            }

            var comparerMethod = GenerateComparerMethod(property);
            AppendIndentedText(sb, classDeclarationHeaders.Count + 3, comparerMethod);
        }

        AppendIndentedText(sb, classDeclarationHeaders.Count + 2, "};");
        AppendIndentedText(sb, classDeclarationHeaders.Count + 1, "}");

        //if (notGeneratedProperties.Any())
        //{
        //    sb.AppendLine();
        //    foreach (var property in notGeneratedProperties)
        //    {
        //        var compareLine = $"//r.CompareMember(x => x.{property.Name}, left, right);";
        //        AppendIndentedText(sb, classDeclarationHeaders.Count + 2, compareLine);
        //    }
        //}

        for (var i = classDeclarationHeaders.Count - 1; i > -1; i--)
        {
            AppendIndentedText(sb, i + 1, "}");
        }

        AppendIndentedText(sb, 0, "}");

        var classContent = sb.ToString();

        return classContent;
    }

    static void AppendIndentedText(StringBuilder sb, int indentLevel, string text, string extraLeadingTextPerLine = null)
    {
        var leadingCharacters = indentLevel > 0 ? string.Concat(Enumerable.Repeat("     ", indentLevel)) : string.Empty;

        var lines = text.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
        foreach (var line in lines)
        {
            sb.AppendLine(line.Length == 0 ? line : $"{leadingCharacters}{extraLeadingTextPerLine}{line}");
        }
    }

    static string GetFileName(GenerateComparerCommand command)
    {
        var classDescription = command.HostingClassDescription ?? command.TargetClassDescription;
        var fileName = $"{classDescription.Namespace.Replace(".", "_")}_{classDescription.GetDisplayClassName().Replace(".", "_")}.DeepClone.cs";

        return fileName;
    }

    static string GenerateComparerMethod(GeneratorPropertyDescription propertyDescription)
    {
        var propertyContent = string.Empty;
        switch (propertyDescription.ValueType)
        {
            case GeneratorPropertyValueType.Unknown:
                break;
            case GeneratorPropertyValueType.NotSupported:
                break;
            case GeneratorPropertyValueType.Basic:
                propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name},";
                break;
            case GeneratorPropertyValueType.Array:
                if (propertyDescription.MapType == GeneratorPropertyValueMapType.Select)
                {
                    propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name}?.Select(o => o).ToArray(),";
                }
                else if (propertyDescription.MapType == GeneratorPropertyValueMapType.SelectDeepClone)
                {
                    propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name}?.Select(o => o?.DeepClone()).ToArray(),";
                }
                break;
            case GeneratorPropertyValueType.List:
                if (propertyDescription.MapType == GeneratorPropertyValueMapType.Select)
                {
                    propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name}?.Select(o => o).ToList(),";
                }
                else if (propertyDescription.MapType == GeneratorPropertyValueMapType.SelectDeepClone)
                {
                    propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name}?.Select(o => o?.DeepClone()).ToList(),";
                }
                break;
            case GeneratorPropertyValueType.Dictionary:
                if (propertyDescription.MapType == GeneratorPropertyValueMapType.Simple)
                {
                    propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name}?.ToDictionary(o => o.Key, o => o.Value),";
                }
                else if (propertyDescription.MapType == GeneratorPropertyValueMapType.DeepClone)
                {
                    propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name}?.ToDictionary(o => o.Key, o => o.Value?.DeepClone()),";
                }
                break;
            case GeneratorPropertyValueType.Object:
                propertyContent = $"{propertyDescription.Name} = {propertyDescription.Name}?.DeepClone(),";
                break;
        }

        if (string.IsNullOrWhiteSpace(propertyContent))
        {
            propertyContent = $"//{propertyDescription.Name}";
        }

        return propertyContent;
    }
}
